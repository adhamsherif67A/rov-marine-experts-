import rclpy
from rclpy.node import Node
import cv2
import numpy as np
import os
import glob
import pyzed.sl as sl
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from PIL import Image as PILImage
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
from PyQt5.QtWidgets import QApplication, QMainWindow, QOpenGLWidget
from PyQt5.QtCore import Qt

# Ensure directory exists
def ensure_directory_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

class ZEDCameraNode(Node):
    def __init__(self):
        super().__init__('zed_camera_node')
        self.publisher_ = self.create_publisher(Image, 'zed_images', 10)
        self.bridge = CvBridge()
        self.zed = sl.Camera()
        self.timer = self.create_timer(1.0, self.capture_image)
        
        init_params = sl.InitParameters()
        init_params.camera_resolution = sl.RESOLUTION.HD1080
        init_params.camera_fps = 30

        if self.zed.open(init_params) != sl.ERROR_CODE.SUCCESS:
            self.get_logger().error("Could not open ZED 2i camera.")
            return

        self.image = sl.Mat()
        self.get_logger().info("ZED Camera Node started.")

    def capture_image(self):
        if self.zed.grab() == sl.ERROR_CODE.SUCCESS:
            self.zed.retrieve_image(self.image, sl.VIEW.LEFT)
            frame = self.image.get_data()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)
            msg = self.bridge.cv2_to_imgmsg(frame, encoding='bgr8')
            self.publisher_.publish(msg)
            self.get_logger().info("Published image from ZED.")

class PanoramaStitchingNode(Node):
    def __init__(self):
        super().__init__('panorama_stitching_node')
        self.subscription = self.create_subscription(Image, 'zed_images', self.image_callback, 10)
        self.bridge = CvBridge()
        self.images_dir = "images"
        ensure_directory_exists(self.images_dir)
        self.image_count = 0
        self.get_logger().info("Panorama Stitching Node started.")

    def image_callback(self, msg):
        frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        self.image_count += 1
        image_path = os.path.join(self.images_dir, f"photo_{self.image_count}.jpg")
        cv2.imwrite(image_path, frame)
        self.get_logger().info(f"Saved image: {image_path}")

        if self.image_count >= 5:  # Trigger stitching after enough images
            self.create_panorama()

    def create_panorama(self):
        image_paths = sorted(glob.glob("images/*.jpg"))
        images = [cv2.imread(img) for img in image_paths]

        if any(img is None for img in images):
            self.get_logger().error("Some images failed to load.")
            return

        stitcher = cv2.Stitcher_create(cv2.Stitcher_PANORAMA)
        (status, panorama) = stitcher.stitch(images)

        if status == cv2.Stitcher_OK:
            panorama_path = "panorama.jpg"
            cv2.imwrite(panorama_path, panorama)
            self.get_logger().info(f"Panorama saved at: {panorama_path}")
        else:
            self.get_logger().error("Failed to create panorama.")

class PanoramaViewer(QOpenGLWidget):
    def __init__(self, image_path, parent=None):
        super().__init__(parent)
        self.image_path = image_path
        self.texture_id = None
        self.yaw, self.pitch, self.roll = 0, 0, 0

    def initializeGL(self):
        glEnable(GL_TEXTURE_2D)
        glEnable(GL_DEPTH_TEST)
        self.texture_id = self.loadTexture(self.image_path)

    def resizeGL(self, width, height):
        glViewport(0, 0, width, height)
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(110, width / height, 0.1, 100)
        glMatrixMode(GL_MODELVIEW)

    def paintGL(self):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
        glRotatef(self.pitch, 1, 0, 0)
        glRotatef(self.yaw, 0, 0, 1)
        self.drawSphere()

    def drawSphere(self):
        glBindTexture(GL_TEXTURE_2D, self.texture_id)
        quadric = gluNewQuadric()
        gluQuadricTexture(quadric, GL_TRUE)
        gluQuadricOrientation(quadric, GLU_INSIDE)
        gluSphere(quadric, 5, 50, 50)

    def loadTexture(self, image_path):
        img = PILImage.open(image_path).convert("RGBA")
        img = img.transpose(PILImage.FLIP_TOP_BOTTOM)
        img_data = np.array(img, dtype=np.uint8)
        texture_id = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, texture_id)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, img.width, img.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data)
        return texture_id

class PanoramaViewerNode(Node):
    def __init__(self):
        super().__init__('panorama_viewer_node')
        self.get_logger().info("Panorama Viewer Node started.")
        panorama_path = "panorama.jpg"
        app = QApplication(sys.argv)
        window = QMainWindow()
        viewer = PanoramaViewer(panorama_path)
        window.setCentralWidget(viewer)
        window.resize(1920, 1080)
        window.show()
        sys.exit(app.exec_())

if __name__ == "__main__":
    rclpy.init()
    camera_node = ZEDCameraNode()
    stitching_node = PanoramaStitchingNode()
    viewer_node = PanoramaViewerNode()
    rclpy.spin(camera_node)
    rclpy.spin(stitching_node)
    rclpy.spin(viewer_node)
    camera_node.destroy_node()
    stitching_node.destroy_node()
    viewer_node.destroy_node()
    rclpy.shutdown()
